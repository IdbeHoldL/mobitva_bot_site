<?php

/**
 * Skeleton subclass for performing query and update operations on the 'botconfig' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 01/05/13 16:52:24
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class botconfigPeer extends BasebotconfigPeer {

  /**
   * Получить все конфиги созданные пользователем
   * @param type $userId id пользователя
   * @return botconfig[] 
   */
  public static function getUserConfigs($userId) {

    $c = new Criteria();
    $c->add(self::USER_ID, $userId);

    return self::doSelect($c);
  }

  public static function getDefaultConfigByUserId($userId) {
    $c = new Criteria();
    $c->add(self::USER_ID, $userId);
    $c->add(self::IS_DEFAULT, true);

    return self::doSelectOne($c);
  }

  public static function getUserAddedConfigs($userId) {

    $c = new Criteria();
    $c->addJoin(crosUserConfigPeer::BOTCONFIG_ID, self::ID);
    $c->add(crosUserConfigPeer::USER_ID, $userId);
//    $c->add(crosUserConfigPeer::DATE_END, date('Y-m-d'), Criteria::GREATER_THAN);

    return self::doSelect($c);
  }

  public static function checkUserConfigAccess($userId, $configId) {
  
	if ($config= self::retrieveByPk($configId)){
		if ($config->getIsGlobal()){
			return true;
		}
	}
  
    $c = new Criteria();
    $c->add(crosUserConfigPeer::USER_ID, $userId);
    $c->add(crosUserConfigPeer::BOTCONFIG_ID, $configId);
    $c->add(crosUserConfigPeer::DATE_END, date('Y-m-d'), Criteria::GREATER_EQUAL);

    return self::doCount($c);
  }
  
  public static function getGlobalConfigs(){
    
    $c = new Criteria();
    $c->add(self::IS_GLOBAL, true);
    
    return self::doSelect($c);
  }

}

// botconfigPeer
