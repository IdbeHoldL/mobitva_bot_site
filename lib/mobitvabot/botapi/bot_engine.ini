; mobitvabot engine file
; bot.ver.:     1.0
; engine ver.:  0.2

; bot functions:
; - sleep( mSec )
; - setCurrentLoc( locationName )
; - setVar( varName, value)
; - setScreenVar( varName, x, y, width, heidht, hash)
; - checkScreen( varName, taskTrue, taskFalse)
; - waitScreen( varName, taskTrue, taskFalse, maxWaitTime)
; - showGlobalArrays()

; --------- [developer] ---------


[~testTasks]
command = runTask(~battle)

[111]
command = wait(1000)
command = sendKey(DOWN)
command = wait(1000)
command = sendKey(DOWN)
command = wait(1000)
command = sendKey(DOWN)

command = wait(1000)
command = sendKey(UP)
command = wait(1000)
command = sendKey(UP)


command = wait(1000)
command = sendKey(DOWN)

command = wait(1000)
command = sendKey(DOWN)

command = wait(1000)
command = sendKey(DOWN)

[111]
command = runTask(~battle)

[111]
command = setVar(var1, 100)
expression = (getVar(var1) = 99) ? runTask(~ololo) : doNothing()
expression = (getVar(var1) = 100) ? runTask(~ololo) : doNothing()
;command = waitScreen( berserk, runTask(~runBattle), runTask(~ololo), 2000)

[~ololo1]
message = ololo1 Task!
[~ololo]
message = ololo Task!

[example]
; создаем переменную var1 = 100
command = setVar(var1, 100)
; увеличиваем var1 на 10
command = incVar(var1, 10)
; выводим значение var1 в консоль
command = outVar(var1)
; уменьшаем var1 на 20
command = decVar(var1, 20)
; выводим значение var1 в консоль
command = outVar(var1)
; возвращает значение переменной
command = getVar('var1')
; выводит сообщение
message = ololo Task!

; ----- пример выражений с условиями:
; устанавливаем переменную
command = setVar(var1, 100)
; проверяем. Если var1 = 99 то выполнится runTask(~ololo), иначе doNothing()
expression = ( getVar(var1) = 99 ) ? runTask(~ololo) : doNothing()
; еще раз:   ( выражение ) ? [команда, если верно] : [команда, если неверно]
expression = ( getVar(var1) = 100 ) ? runTask(~ololo) : doNothing()
; операторы сравнения:
;      >       - больше
;      <       - меньще
;      =       - равно
;      <>      - не рано



;command = checkScreen(berserk,[~testTrueTask],[~testFalseTask])
;command = waitScreen(berserk,[~testTrueTask],[~testFalseTask],1000)
;command = waitScreen(attackButtons,[~testTrueTask],[~testFalseTask],1500)

; запись "do = taskName" и "command = runTask(taskName)" идентичны
;command = runTask(~testTasks)

; определим секцию, которая должна быть переопределенна пользователем
[tasks]
command = doNothing()

[~testTrueTask]
message = test True Task!
[~testFalseTask]
message = test False Task!

[~loop_loop]
; увеличить переменную
command = incVar(numBatle,100)
; уменьшить переменную
command = decVar(numBatle,100)
;                 (выражение) ? команда, если true  : команда, если false
expression = (numBatle < 100) ? runTask(taskName) : doNothing()
expression = (numBatle < 100) ? incVar(numBatle,100) : decVar(numBatle,100)

; --------- End [developer] -----


; ------------------------------------------------------------------------------
; ---------------------------- [Mobitva bot Engine] ----------------------------
; ------------------------------------------------------------------------------

; секция tasks переопределяется конфигами пользователя
[tasks]
command = doNothing()


; --------- [БОЙ] ---------

[~battle]
command = setVar(endBattle, 0)
command = setVar(turnNum, 0)

command = outVar(endBattle)
; начинаем бой, если появились кнопки атаки
command = waitScreen(attackButtons, __(runTask(~battle_loop)), __(setVar(endBattle, 1)), 10000)

[~battle_loop] ; сам цикл боя. увеличиваем счетчик, делаем ход, ожидаем нового хода, либо завершения боя
command = incVar(turnNum, 1)
command = outVar(endBattle)
expression = (getVar(endBattle) = 0) ? runTask(~battle_turn) : ~

[~battle_turn] ; Ход. Если это первый ход и нужен блок - ставим. Если нужно использовать свитки - используем.
; блок
expression = (getVar(turnNum) = 1 AND getVar(blocks) = 1) ? sendKey(5) : ~
; эликсиры
command = setVar(isScrollTurn, modVar(turnNum,scrolls))
expression = (checkScreenHash(hasScroll) AND getVar(scrolls) <> 0 AND getVar(isScrollTurn) = 0) ? runTask(~useScroll) : ~
; сам удар
command = sendKey(getElement(comboArray, getVar(turnNum)))
do = ~checkBattleScreen

[~useScroll] ; использвание свитка
do = send_key_down-10
do = send_key_enter
expression = (checkScreenHash(existEffects)) ? sendKey(ENTER) : ~

[~checkBattleScreen] ; ожидание кнопок атаки, либо завершения боя.
command = sleep(500)
command = message(getVar(turnNum))
;command = checkScreen(disconnect, __(~), __(~))
command = checkScreen(inBattle, __(~), __(setVar(endBattle, 1)))
command = checkScreen(attackButtons, __(runTask(~battle_loop)), __(~))
expression = (getVar(endBattle) = 1) ? runTask(~battle_loop) : runTask(~checkBattleScreen)

[battle]
do = ~battle
do = ~battle_results
do = ~checkEvents

; --------- End [БОЙ] -----


; --------- [Результаты боя] ---------

[~battle_results]
command = sendKey(ENTER)

; --------- End [Результаты боя] -----


[~attack_mob]
do = ~send_key_enter-2
do = battle
;do = ~battle
;do = ~battle_results

[~attack_mob_1]
command = sendKey(1)
do = ~attack_mob

[~attack_mob_2]
command = sendKey(1)
do = ~send_key_down
do = ~attack_mob

[~attack_mob_3]
command = sendKey(1)
do = ~send_key_down-2
do = ~attack_mob

[~attack_mob_4]
command = sendKey(1)
do = ~send_key_down-3
do = ~attack_mob

[~attack_mob_5]
command = sendKey(1)
do = ~send_key_down-4
do = ~attack_mob

[~attack_mob_6]
command = sendKey(1)
do = ~send_key_down-5
do = ~attack_mob

[~attack_mob_7]
command = sendKey(1)
do = ~send_key_down-6
do = ~attack_mob

[~attack_mob_8]
command = sendKey(1)
do = ~send_key_down-7
do = ~attack_mob

[~attack_mob_9]
command = sendKey(1)
do = ~send_key_down-8
do = ~attack_mob

[~attack_mob_10]
command = sendKey(1)
do = ~send_key_down-9
do = ~attack_mob

[~send_key_down]
command = sendKey(DOWN)
[~send_key_up]
command = sendKey(UP)
[~send_key_enter]
command = sendKey(ENTER)
[~send_key_1]
command = sendKey(1)
[~send_key_2]
command = sendKey(2)
[~send_key_3]
command = sendKey(3)
[~send_key_4]
command = sendKey(4)
[~send_key_5]
command = sendKey(6)
[~send_key_6]
command = sendKey(6)
[~send_key_7]
command = sendKey(7)
[~send_key_8]
command = sendKey(8)
[~send_key_9]
command = sendKey(9)
[~send_key_0]
command = sendKey()
[~send_key_f1]
command = sendKey(F1)
[~send_key_f12]
command = sendKey(F12)

; --------- [Начало работы бота] ---------

[~engineTasks]
do = ~engineSets
do = ~setScreenMobs
do = ~setScreenEvents

; --------- End [Начало работы бота] -----


; --------- [Переменные среды] ---------

[~engineSets]
;message = установка переменных среды...
command = setArray(comboArray, 1-3-1-1-3-2-3-3-2)
command = setVar(current_loc,стагород)
command = setVar(scrolls,2)
command = setVar(blocks,1)
command = setVar(power_regen,false)
command = setVar(screen_delay,500)
command = setVar(start_battle_wait,5000)

;message = ok!

; --------- End [Переменные среды] ------


; --------- [Переменные экрана] ---------

; мобы
[~setScreenMobs]
; нападение берсерка
command = setScreenVar(attackBerserk,102,120,50,50,0xA325FF8FAA7C24629D788655C3EAD1A9)
; человек с капюшоном
command = setScreenVar(manWithHood,111,68,25,25,0x6136966991B217C242C9DF4F128C3370)
; скелет
command = setScreenVar(bones,113,72,25,25,0xA25981BE08F50AFB4D9BAE4DB9A0B500)
; алкаш
command = setScreenVar(drunkard,106,73,25,25,0x665EE34865BE48D18BE4663C4A0E0996)


; события
[~setScreenEvents]
; disconnect - используется для проверки разъединения с сервером (скрин кропки "выход")
command = setScreenVar(disconnect,185,275,50,50,0xD261573CCA7258EC150DC1629B993359)
; attackButtons - используется во время боя. (скрин левой части первой кнопки атаки)
command = setScreenVar(attackButtons,73,171,5,5,0x472CA62D51C1C1CDCE7E802FF96EF1F5)
; battleResults - результаты боя. (скрин слова результаты)
command = setScreenVar(battleResults,234,103,5,5,0xBCFA24E3C9A32FB25A48E3B7F4D747FD)

; в бою?
command = setScreenVar(inBattle,4,142,25,25,0xD4E3E6A16ADB276D8C6A6A534AD7106D)
; есть свиток?
command = setScreenVar(hasScroll,28,220,5,5,0xE4DB7301E3A1057D90B9035E60AF556F)
; существующие эффекты?
command = setScreenVar(existEffects,96,126,50,50,0xE7972200D95892FFE8BD1F9CD9989E33)

; выживание, кнопка выхода из боя.
command = setScreenVar(exitBattleButton,94,170,50,50,0xBD4CF25E376645E3FF369698D1607DF2)


; winResult - победитель? 
command = setScreenVar(winResult,21,32,25,25,0x9135E2DD88DD28D5057EF958E772461F)
; окончание загрузки (скрин правого нижнего угла, там где у нас загрузка)
command = setScreenVar(endLoading,181,309,5,5,0x32E5F8244461B6CEE7F9878F6EA75B7A)


; --------- End [Переменные экрана] -----

; --------- [События] ---------

[~chechDisconnect]
expression = (checkScreenHash(disconnect)) ? runTask(~reconnect) : ~

[~reconnect]
do = ~send_key_f1
command = sleep(1000)
do = ~chechDisconnect

[~checkEvents]


[~checkAttacks]
command = setVar(allreadyAttack, 0)
expression = (checkScreenHash(attackBerserk)) ? (getVar(berserkAttack) = 0) ? runTasks(~start_attack) : message(Берсерк!) : ~

expression = (checkScreenHash(manWithHood) AND getVar(allreadyAttack) = 0 ) ? (getVar(hoodmanAttack) = 0) ? runTasks(~start_attack) : message(нападение!) : ~
expression = (checkScreenHash(bones) AND getVar(allreadyAttack) = 0 ) ? (getVar(bonesAttack) = 0) ? runTasks(~start_attack) : message(нападение!) : ~
expression = (checkScreenHash(drunkard) AND getVar(allreadyAttack) = 0 ) ? (getVar(drunkardAttack) = 0) ? runTasks(~start_attack) : message(нападение!) : ~


[~start_attack]
command = setVar(allreadyAttack, 1)
do = ~send_key_enter-2
do = ~battle

; --------- End [События] -----